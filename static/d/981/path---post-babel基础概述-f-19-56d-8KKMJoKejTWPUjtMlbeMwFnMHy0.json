{"data":{"markdownRemark":{"html":"<ul>\n<li>babel 可以通过<code class=\"language-text\">.babelrc</code>、<code class=\"language-text\">babel.config.js</code>或<code class=\"language-text\">package.json</code>中的<code class=\"language-text\">babel</code>字段进行配置</li>\n<li>以<code class=\"language-text\">.babelrc</code>为例，设置最常用的<code class=\"language-text\">presets</code>和<code class=\"language-text\">plugins</code>两个配置项：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   <span class=\"token string\">\"presets\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"presetsA\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"presetsAOptions\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"presetsAValue\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"pluginsA\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"pluginsAOptions\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"pluginsAValue\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>更多配置项可以见<a href=\"https://babeljs.io/docs/en/options\">babel文档</a></li>\n</ul>\n<hr>\n<h4>plugins</h4>\n<ul>\n<li>babel 是一个编译器，它接受代码，经过对应语法转义后输出代码。而babel 的语法转义是通过 plugin实现的，plugin 会指导babel 对相应 JavaScript 程序进行编译，比如<code class=\"language-text\">@babel/plugin-transform-arrow-functions</code>，可以将箭头函数转化为ES5的非箭头函数，如下面代码。babel 的语法转义功能，即将目标环境无法识别的语法，转化为对应可以识别的语法，从而使一些更高级的语法功能能够在目标环境中运行。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// converted to</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>plugin 分为<code class=\"language-text\">transform plugins</code>和<code class=\"language-text\">syntax plugins</code>，<code class=\"language-text\">transform plugins</code>会包含对应的<code class=\"language-text\">syntx plugins</code>，它会识别并解析高级语法，并转化为目标环境能够识别的语法，比如上面箭头函数的例子。<code class=\"language-text\">syntx plugins</code>只能够使 babel 能够解析对应语法，但并不能转化他们。</li>\n<li>babel 的<code class=\"language-text\">transform plugins</code>列表可见：<a href=\"https://babeljs.io/docs/en/plugins\">https://babeljs.io/docs/en/plugins</a></li>\n<li>\n<p>我们也可以自定义plugin，来转化我们想转化的语法。可以参考：</p>\n<ul>\n<li><a href=\"https://itnext.io/introduction-to-custom-babel-plugins-98a62dad16ee\">babel自定义插件简介</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\">babel插件手册</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4>preset</h4>\n<ul>\n<li>在我们的项目中，因为有很多需要转化的点，比如 ES6的一堆功能，一个一个的添加插件会显得非常困难，这个是时候就有了 preset。preset 是一个插件包，里面有预设好的一堆插件。我们自己也可以自定义 preset，将一些插件以我们想要的方式进行排列，并进行共享。</li>\n<li>常见比较常用的preset 有：@babel/preset-env</li>\n</ul>\n<hr>\n<h4>plugins和 preset 执行顺序</h4>\n<p>babel 会按照配置文件中指定的 plugins 和 preset 来转化代码，plugins 和 preset 的执行顺序如下：</p>\n<ul>\n<li>先执行 plugins，然后执行 preset</li>\n<li>plugins 列表，按照从前往后的顺序执行</li>\n<li>preset 列表，按照从后往前的顺序执行</li>\n</ul>\n<hr>\n<h4>polyfill</h4>\n<ul>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/babel-polyfill\">@babel/polyfill</a>模块中包含了<code class=\"language-text\">core-js</code>和一个自定义的<code class=\"language-text\">regenerator runtime</code>来模拟 ES2015以上的 JavaScript 允许环境。它可以帮助你 polyfill 一些 ES2015及以上的功能，比如内建的<code class=\"language-text\">Promise</code>、<code class=\"language-text\">WeakMap</code>，静态方法<code class=\"language-text\">Array.from</code>、实例方法<code class=\"language-text\">Array.prototype.includes</code>，以及生成器函数。</p>\n</li>\n<li>\n<p>注意，因为 polyfill 是需要在生成环境被使用的，所以需要按照<code class=\"language-text\">npm install --save @babel/polyfill</code>的方式进行安装</p>\n</li>\n<li>\n<p>使用方式：</p>\n<ul>\n<li>单独手动引入。手动引入又分为 <strong>在项目入口文件处整体引入</strong> 和在 <strong>使用时引入引入特定模块</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 整体引入</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@babel/polyfill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 通过 webpack 的方式整体引入</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nentry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/polyfill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./app/js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 引入特定模块</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core-js/modules/es.promise.finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<ul>\n<li>通过 <code class=\"language-text\">@babel/preset-env</code>引入，见下面对<code class=\"language-text\">@babel/preset-env</code>的介绍。</li>\n<li>通过<code class=\"language-text\">@babel/plugin-transform-runtime</code>引入，这种引入方式能够做到不影响全局变量，但是以这种方式引入后，无法引用实例方法，比如<code class=\"language-text\">Array.prototype.includes</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4>@babel/preset-env</h4>\n<ul>\n<li>在这个 preset 中包含了所有支持现代 JavaScript（包括ES2015、ES2016等）的插件。</li>\n<li>设置<code class=\"language-text\">useBuiltIns：&quot;usage&quot;</code>后，babel 会探测你代码中使用到的，但是目标环境中缺失的功能，并引入对应的这个 polyfill，而不是整个 polyfill 文件。从而减少包的体积。</li>\n</ul>\n<h5>原理</h5>\n<ul>\n<li><code class=\"language-text\">@babel/preset-env</code>会将代码的指定目标运行环境，通过一些数据源对应为在目标环境中运行相应代码所需要的语法及功能，然后将这些语法和功能对应为对应所需的插件和 polyfill，从而通过这些插件和 polyfill，将代码转化为可以在目标环境中允许的代码</li>\n<li>可以通过<code class=\"language-text\">.browserlistrc</code>指定代码的目标运行环境，<code class=\"language-text\">.browserlistrc</code>的配置方式可以参考<a href=\"https://github.com/browserslist/browserslist#queries\">browserlist项目</a>，如果没有找到<code class=\"language-text\">.browserlistrc</code>文件，则会使用<a href=\"https://github.com/browserslist/browserslist#queries\">默认配置</a></li>\n</ul>\n<h5>@babel/preset-env和@babel/polyfill</h5>\n<p>通过<code class=\"language-text\">@babel/preset-env</code>可以引入<code class=\"language-text\">@babel/polyfill</code>：</p>\n<ul>\n<li>指定<code class=\"language-text\">useBuiltIns: &#39;usage&#39;</code>后，不需要再显性<code class=\"language-text\">require</code>或<code class=\"language-text\">import</code> <code class=\"language-text\">@babel/polyfill</code>。但是注意<code class=\"language-text\">@babel/polyfill</code>还是需要被安装。设置后，babel 会在需要时，独引用<code class=\"language-text\">@babel/polyfill</code>的特定 polyfill，而不是整个polyfill</li>\n<li>多次引入<code class=\"language-text\">@babel/polyfill</code>会造成一些不可预知的问题。如果指定<code class=\"language-text\">useBuiltIns: &#39;entry&#39;</code>，任需在使用到的地方手动通过通过<code class=\"language-text\">require</code>或<code class=\"language-text\">import</code> <code class=\"language-text\">@babel/polyfill</code>，但是它会将所有的 <code class=\"language-text\">import &quot;@babel/polyfill&quot;</code>或 <code class=\"language-text\">require(&quot;@babel/polyfill&quot;)</code> 根据环境，转化为一个单独的引入。</li>\n<li>如果<code class=\"language-text\">useBuiltIns</code>未被指定或被显性指定为 false，则需要在手动显性引入<code class=\"language-text\">@babel/polyfill</code></li>\n</ul>\n<h5>forceAllTransforms参数</h5>\n<ul>\n<li>默认为 false，此时会按照目标运行环境执行对应转化</li>\n<li>如果设置为true，此时会强制执行所有可能的转化，如果目标代码需要执行UglifyJS 或执行在一个只支持ES5的环境中，则这个参数会很有用</li>\n</ul>\n<hr>\n<h4>@babel/plugin-transform-runtime</h4>\n<h5>作用</h5>\n<ul>\n<li>babel 会使用一些工具函数，比如<code class=\"language-text\">_extend</code>，这些工具函数基本上会在每个文件中被使用到，导致在每个文件中，都需要去定义这些工具函数。而<code class=\"language-text\">@babel/plugin-transform-runtime</code>会使所有的工具函数都去引用<code class=\"language-text\">@babel/runtime</code>，这样就避免了不断去重复定义这些工具函数。</li>\n<li>另一个作用是，为代码创建一个沙箱环境。如果使用<code class=\"language-text\">@babel/polyfill</code>，它会提供一些类似<code class=\"language-text\">Promise</code>、<code class=\"language-text\">Set</code>的功能，这些功能的实现会污染全局环境，当你需要发布某个库时，这就会成为一个问题。这个插件可以解决这个问题，具体可见：<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-runtime#technical-details%E3%80%82\">https://babeljs.io/docs/en/babel-plugin-transform-runtime#technical-details。</a></li>\n</ul>\n<h5>使用</h5>\n<ul>\n<li>开发环境</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/plugin-transform-runtime</code></pre></div>\n<ul>\n<li>生成环境需要安装<code class=\"language-text\">@babel/runtime</code>作为</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save @babel/runtime</code></pre></div>\n<h5>引入 polyfill</h5>\n<ul>\n<li>对于 babel 7.0及以上，移除了原有的<code class=\"language-text\">polyfill</code>参数，此时，通过<code class=\"language-text\">@babel/plugin-transform-runtime</code>引入 polyfill 的方式是，在配置文件中指定<code class=\"language-text\">corejs</code>为2，并采用<code class=\"language-text\">@babel/runtime-corejs2</code>。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/plugin-transform-runtime\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"corejs\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save @babel/runtime-corejs2</code></pre></div>\n<ul>\n<li>需要注意的是，这种方式引入的 polyfill，无法使用实例方法，如<code class=\"language-text\">&quot;foobar&quot;.includes(&quot;foo&quot;)</code></li>\n</ul>\n<h5>使用async和 await</h5>\n<ul>\n<li><code class=\"language-text\">@babel/plugin-transform-runtime</code>中，参数<code class=\"language-text\">regenerator</code>可以指定是否转化生成器函数，指定为 true（默认也是 true）时，可以转化<code class=\"language-text\">async</code>和<code class=\"language-text\">await</code></li>\n</ul>\n<hr>\n<h4>@babel/preset-stage-x</h4>\n<ul>\n<li>babel7 已经去除了所有的<code class=\"language-text\">@babel/preset-stage-x</code>，相关信息可以在<a href=\"https://babeljs.io/blog/2018/07/27/removing-babels-stage-presets\">去除Babel 的Stage Presets</a>这篇文章中获取到</li>\n<li>简单来说，<code class=\"language-text\">@babel/preset-stage-x</code> 使很多用户能干哟用上一些 proposal 的功能的同时，让大家误以为这些 proposal 的功能就是标准，最后造成了一些迁移以及处理上的麻烦，所以在babel7中将 stage 的 preset 去除了</li>\n</ul>","frontmatter":{"title":"babel基础概述"}}},"pageContext":{"postName":"post/babel基础概述"}}